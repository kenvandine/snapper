/* fwupd.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Fwupd", gir_namespace = "Fwupd", gir_version = "2.0", lower_case_cprefix = "fwupd_")]
namespace Fwupd {
	[CCode (cheader_filename = "fwupd.h", type_id = "fwupd_client_get_type ()")]
	public class Client : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "0.7.0")]
		public Client ();
		[Version (since = "0.7.0")]
		public bool clear_results (string device_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.7.1")]
		public bool connect (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.9.6")]
		public unowned string get_daemon_version ();
		[Version (since = "1.0.0")]
		public GLib.GenericArray<weak Fwupd.Device> get_details (string filename, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.9.3")]
		public Fwupd.Device get_device_by_id (string device_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.9.2")]
		public GLib.GenericArray<weak Fwupd.Device> get_devices (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.9.8")]
		public GLib.GenericArray<weak Fwupd.Release> get_downgrades (string device_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0.4")]
		public GLib.GenericArray<weak Fwupd.Device> get_history (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.7.3")]
		public uint get_percentage ();
		[Version (since = "0.9.3")]
		public GLib.GenericArray<weak Fwupd.Release> get_releases (string device_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.9.3")]
		public Fwupd.Remote get_remote_by_id (string remote_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.9.3")]
		public GLib.GenericArray<weak Fwupd.Remote> get_remotes (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.7.0")]
		public Fwupd.Device get_results (string device_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.7.3")]
		public Fwupd.Status get_status ();
		[Version (since = "0.9.8")]
		public GLib.GenericArray<weak Fwupd.Release> get_upgrades (string device_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.7.0")]
		public bool install (string device_id, string filename, Fwupd.InstallFlags install_flags, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0.4")]
		public bool modify_device (string device_id, string key, string value, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.9.8")]
		public bool modify_remote (string remote_id, string key, string value, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.7.0")]
		public bool unlock (string device_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0.0")]
		public bool update_metadata (string remote_id, string metadata_fn, string signature_fn, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.7.0")]
		public bool verify (string device_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.8.0")]
		public bool verify_update (string device_id, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.9.6")]
		public string daemon_version { get; }
		[NoAccessorMethod]
		[Version (since = "0.7.3")]
		public uint percentage { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.7.0")]
		public uint status { get; set; }
		[Version (since = "0.7.0")]
		public virtual signal void changed ();
		[Version (since = "0.7.1")]
		public virtual signal void device_added (Fwupd.Device result);
		[Version (since = "0.7.1")]
		public virtual signal void device_changed (Fwupd.Device result);
		[Version (since = "0.7.1")]
		public virtual signal void device_removed (Fwupd.Device result);
		public virtual signal void status_changed (uint status);
	}
	[CCode (cheader_filename = "fwupd.h", type_id = "fwupd_device_get_type ()")]
	public class Device : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "0.9.3")]
		public Device ();
		[Version (since = "0.9.3")]
		public void add_checksum (string checksum);
		[Version (since = "0.9.3")]
		public void add_flag (Fwupd.DeviceFlags flag);
		[Version (since = "0.9.3")]
		public void add_guid (string guid);
		[Version (since = "0.9.8")]
		public void add_icon (string icon);
		[Version (since = "0.9.8")]
		public void add_release (Fwupd.Release release);
		[Version (since = "0.7.0")]
		public static Fwupd.DeviceFlags flag_from_string (string device_flag);
		[Version (since = "0.7.0")]
		public static unowned string flag_to_string (Fwupd.DeviceFlags device_flag);
		[Version (since = "1.0.0")]
		public static Fwupd.Device from_variant (GLib.Variant data);
		[Version (since = "0.9.3")]
		public unowned GLib.GenericArray<string> get_checksums ();
		[Version (since = "0.9.3")]
		public uint64 get_created ();
		[Version (since = "0.9.3")]
		public unowned string get_description ();
		[Version (since = "0.9.3")]
		public uint64 get_flags ();
		[Version (since = "0.9.3")]
		public uint32 get_flashes_left ();
		[Version (since = "0.9.3")]
		public unowned string get_guid_default ();
		[Version (since = "0.9.3")]
		public unowned GLib.GenericArray<string> get_guids ();
		[Version (since = "0.9.8")]
		public unowned GLib.GenericArray<string> get_icons ();
		[Version (since = "0.9.3")]
		public unowned string get_id ();
		[Version (since = "0.9.3")]
		public uint64 get_modified ();
		[Version (since = "0.9.3")]
		public unowned string get_name ();
		[Version (since = "1.0.0")]
		public unowned string get_plugin ();
		[Version (since = "0.9.8")]
		public unowned Fwupd.Release get_release_default ();
		[Version (since = "0.9.8")]
		public unowned GLib.GenericArray<Fwupd.Release> get_releases ();
		[Version (since = "0.9.3")]
		public unowned string get_summary ();
		[Version (since = "0.9.8")]
		public unowned string get_update_error ();
		[Version (since = "0.9.8")]
		public Fwupd.UpdateState get_update_state ();
		[Version (since = "0.9.3")]
		public unowned string get_vendor ();
		[Version (since = "0.9.4")]
		public unowned string get_vendor_id ();
		[Version (since = "0.9.3")]
		public unowned string get_version ();
		[Version (since = "0.9.3")]
		public unowned string get_version_bootloader ();
		[Version (since = "0.9.3")]
		public unowned string get_version_lowest ();
		[Version (since = "0.9.3")]
		public bool has_flag (Fwupd.DeviceFlags flag);
		[Version (since = "0.9.3")]
		public bool has_guid (string guid);
		[Version (since = "0.9.3")]
		public void remove_flag (Fwupd.DeviceFlags flag);
		[Version (since = "0.9.3")]
		public void set_created (uint64 created);
		[Version (since = "0.9.3")]
		public void set_description (string description);
		[Version (since = "0.9.3")]
		public void set_flags (uint64 flags);
		[Version (since = "0.9.3")]
		public void set_flashes_left (uint32 flashes_left);
		[Version (since = "0.9.3")]
		public void set_id (string id);
		[Version (since = "0.9.3")]
		public void set_modified (uint64 modified);
		[Version (since = "0.9.3")]
		public void set_name (string name);
		[Version (since = "1.0.0")]
		public void set_plugin (string plugin);
		[Version (since = "0.9.3")]
		public void set_summary (string summary);
		[Version (since = "0.9.8")]
		public void set_update_error (string update_error);
		[Version (since = "0.9.8")]
		public void set_update_state (Fwupd.UpdateState update_state);
		[Version (since = "0.9.3")]
		public void set_vendor (string vendor);
		[Version (since = "0.9.4")]
		public void set_vendor_id (string vendor_id);
		[Version (since = "0.9.3")]
		public void set_version (string version);
		[Version (since = "0.9.3")]
		public void set_version_bootloader (string version_bootloader);
		[Version (since = "0.9.3")]
		public void set_version_lowest (string version_lowest);
		[Version (since = "0.9.3")]
		public string to_string ();
		[Version (since = "1.0.0")]
		public GLib.Variant to_variant ();
	}
	[CCode (cheader_filename = "fwupd.h", type_id = "fwupd_release_get_type ()")]
	public class Release : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "0.9.3")]
		public Release ();
		[Version (since = "0.9.3")]
		public void add_checksum (string checksum);
		[Version (since = "1.0.4")]
		public void add_metadata (GLib.HashTable<void*,void*> hash);
		[Version (since = "1.0.4")]
		public void add_metadata_item (string key, string value);
		[Version (since = "1.0.0")]
		public static Fwupd.Release from_variant (GLib.Variant data);
		[Version (since = "0.9.3")]
		public unowned string get_appstream_id ();
		[Version (since = "0.9.3")]
		public unowned GLib.GenericArray<string> get_checksums ();
		[Version (since = "0.9.3")]
		public unowned string get_description ();
		[Version (since = "0.9.3")]
		public unowned string get_filename ();
		[Version (since = "0.9.3")]
		public unowned string get_homepage ();
		[Version (since = "0.9.3")]
		public unowned string get_license ();
		[Version (since = "1.0.4")]
		public unowned GLib.HashTable<void*,void*> get_metadata ();
		[Version (since = "1.0.4")]
		public unowned string get_metadata_item (string key);
		[Version (since = "0.9.3")]
		public unowned string get_name ();
		[Version (since = "0.9.3")]
		public unowned string get_remote_id ();
		[Version (since = "0.9.3")]
		public uint64 get_size ();
		[Version (since = "0.9.3")]
		public unowned string get_summary ();
		[Version (since = "0.9.8")]
		public Fwupd.TrustFlags get_trust_flags ();
		[Version (since = "0.9.3")]
		public unowned string get_uri ();
		[Version (since = "0.9.3")]
		public unowned string get_vendor ();
		[Version (since = "0.9.3")]
		public unowned string get_version ();
		[Version (since = "0.9.3")]
		public void set_appstream_id (string appstream_id);
		[Version (since = "0.9.3")]
		public void set_description (string description);
		[Version (since = "0.9.3")]
		public void set_filename (string filename);
		[Version (since = "0.9.3")]
		public void set_homepage (string homepage);
		[Version (since = "0.9.3")]
		public void set_license (string license);
		[Version (since = "0.9.3")]
		public void set_name (string name);
		[Version (since = "0.9.3")]
		public void set_remote_id (string remote_id);
		[Version (since = "0.9.3")]
		public void set_size (uint64 size);
		[Version (since = "0.9.3")]
		public void set_summary (string summary);
		[Version (since = "0.9.8")]
		public void set_trust_flags (Fwupd.TrustFlags trust_flags);
		[Version (since = "0.9.3")]
		public void set_uri (string uri);
		[Version (since = "0.9.3")]
		public void set_vendor (string vendor);
		[Version (since = "0.9.3")]
		public void set_version (string version);
		[Version (since = "0.9.3")]
		public string to_string ();
		[Version (since = "1.0.0")]
		public GLib.Variant to_variant ();
	}
	[CCode (cheader_filename = "fwupd.h", type_id = "fwupd_remote_get_type ()")]
	public class Remote : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "0.9.3")]
		public Remote ();
		[Version (since = "0.9.7")]
		public string build_firmware_uri (string url) throws GLib.Error;
		[Version (since = "1.0.0")]
		public static Fwupd.Remote from_variant (GLib.Variant data);
		[Version (since = "0.9.5")]
		public uint64 get_age ();
		[Version (since = "1.0.0")]
		public unowned string get_checksum ();
		[Version (since = "0.9.3")]
		public bool get_enabled ();
		[Version (since = "0.9.6")]
		public unowned string get_filename_cache ();
		[Version (since = "0.9.7")]
		public unowned string get_filename_cache_sig ();
		[Version (since = "0.9.8")]
		public unowned string get_filename_source ();
		[Version (since = "0.9.7")]
		public unowned string get_firmware_base_uri ();
		[Version (since = "0.9.3")]
		public unowned string get_id ();
		[Version (since = "0.9.7")]
		public Fwupd.KeyringKind get_keyring_kind ();
		[Version (since = "0.9.6")]
		public Fwupd.RemoteKind get_kind ();
		[Version (since = "0.9.7")]
		public unowned string get_metadata_uri ();
		[Version (since = "0.9.7")]
		public unowned string get_metadata_uri_sig ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.9.5")]
		public unowned string[] get_order_after ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "0.9.5")]
		public unowned string[] get_order_before ();
		[Version (since = "0.9.5")]
		public unowned string get_password ();
		[Version (since = "0.9.5")]
		public int get_priority ();
		[Version (since = "1.0.4")]
		public unowned string get_report_uri ();
		[Version (since = "0.9.8")]
		public unowned string get_title ();
		[Version (since = "0.9.5")]
		public unowned string get_username ();
		[Version (since = "0.9.6")]
		public static Fwupd.RemoteKind kind_from_string (string kind);
		[Version (since = "0.9.6")]
		public static unowned string kind_to_string (Fwupd.RemoteKind kind);
		[Version (since = "0.9.3")]
		public bool load_from_filename (string filename, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "0.9.5")]
		public void set_mtime (uint64 mtime);
		[Version (since = "0.9.5")]
		public void set_priority (int priority);
		[Version (since = "1.0.0")]
		public GLib.Variant to_variant ();
		[NoAccessorMethod]
		[Version (since = "0.9.3")]
		public bool enabled { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.9.3")]
		public string id { owned get; set; }
	}
	[CCode (cheader_filename = "fwupd.h")]
	[SimpleType]
	public struct DeviceFlags : uint64 {
	}
	[CCode (cheader_filename = "fwupd.h", cprefix = "FWUPD_INSTALL_FLAG_", has_type_id = false)]
	public enum InstallFlags {
		NONE,
		OFFLINE,
		ALLOW_REINSTALL,
		ALLOW_OLDER,
		FORCE
	}
	[CCode (cheader_filename = "fwupd.h", cprefix = "FWUPD_KEYRING_KIND_", has_type_id = false)]
	public enum KeyringKind {
		UNKNOWN,
		NONE,
		GPG,
		PKCS7;
		[Version (since = "0.9.7")]
		public static Fwupd.KeyringKind from_string (string keyring_kind);
		[Version (since = "0.9.7")]
		public unowned string to_string ();
	}
	[CCode (cheader_filename = "fwupd.h", cprefix = "FWUPD_REMOTE_KIND_", has_type_id = false)]
	public enum RemoteKind {
		UNKNOWN,
		DOWNLOAD,
		LOCAL
	}
	[CCode (cheader_filename = "fwupd.h", cprefix = "FWUPD_STATUS_", has_type_id = false)]
	public enum Status {
		UNKNOWN,
		IDLE,
		LOADING,
		DECOMPRESSING,
		DEVICE_RESTART,
		DEVICE_WRITE,
		DEVICE_VERIFY,
		SCHEDULING,
		DOWNLOADING,
		DEVICE_READ,
		DEVICE_ERASE,
		WAITING_FOR_AUTH,
		DEVICE_BUSY;
		[Version (since = "0.1.1")]
		public static Fwupd.Status from_string (string status);
		[Version (since = "0.1.1")]
		public unowned string to_string ();
	}
	[CCode (cheader_filename = "fwupd.h", cprefix = "FWUPD_TRUST_FLAG_", has_type_id = false)]
	[Flags]
	public enum TrustFlags {
		NONE,
		PAYLOAD,
		METADATA
	}
	[CCode (cheader_filename = "fwupd.h", cprefix = "FWUPD_UPDATE_STATE_", has_type_id = false)]
	public enum UpdateState {
		UNKNOWN,
		PENDING,
		SUCCESS,
		FAILED,
		NEEDS_REBOOT;
		[Version (since = "0.7.0")]
		public static Fwupd.UpdateState from_string (string update_state);
		[Version (since = "0.7.0")]
		public unowned string to_string ();
	}
	[CCode (cheader_filename = "fwupd.h", cprefix = "FWUPD_ERROR_")]
	public errordomain Error {
		INTERNAL,
		VERSION_NEWER,
		VERSION_SAME,
		ALREADY_PENDING,
		AUTH_FAILED,
		READ,
		WRITE,
		INVALID_FILE,
		NOT_FOUND,
		NOTHING_TO_DO,
		NOT_SUPPORTED,
		SIGNATURE_INVALID,
		AC_POWER_REQUIRED,
		PERMISSION_DENIED;
		[Version (since = "0.7.0")]
		public static unowned Fwupd.Error from_string (string error);
		[Version (since = "0.1.1")]
		public static GLib.Quark quark ();
		[Version (since = "0.7.0")]
		public unowned string to_string ();
	}
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DBUS_INTERFACE")]
	public const string DBUS_INTERFACE;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DBUS_PATH")]
	public const string DBUS_PATH;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DBUS_SERVICE")]
	public const string DBUS_SERVICE;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DEVICE_FLAG_INTERNAL")]
	public const int DEVICE_FLAG_INTERNAL;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DEVICE_FLAG_LOCKED")]
	public const int DEVICE_FLAG_LOCKED;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DEVICE_FLAG_NEEDS_BOOTLOADER")]
	public const int DEVICE_FLAG_NEEDS_BOOTLOADER;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DEVICE_FLAG_NEEDS_REBOOT")]
	public const int DEVICE_FLAG_NEEDS_REBOOT;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DEVICE_FLAG_NONE")]
	public const int DEVICE_FLAG_NONE;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DEVICE_FLAG_NOTIFIED")]
	public const int DEVICE_FLAG_NOTIFIED;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DEVICE_FLAG_ONLY_OFFLINE")]
	public const int DEVICE_FLAG_ONLY_OFFLINE;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DEVICE_FLAG_REGISTERED")]
	public const int DEVICE_FLAG_REGISTERED;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DEVICE_FLAG_REPORTED")]
	public const int DEVICE_FLAG_REPORTED;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DEVICE_FLAG_REQUIRE_AC")]
	public const int DEVICE_FLAG_REQUIRE_AC;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DEVICE_FLAG_SUPPORTED")]
	public const int DEVICE_FLAG_SUPPORTED;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DEVICE_FLAG_UPDATABLE")]
	public const int DEVICE_FLAG_UPDATABLE;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DEVICE_FLAG_USE_RUNTIME_VERSION")]
	public const int DEVICE_FLAG_USE_RUNTIME_VERSION;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_DEVICE_ID_ANY")]
	public const string DEVICE_ID_ANY;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_APPSTREAM_ID")]
	public const string RESULT_KEY_APPSTREAM_ID;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_CHECKSUM")]
	public const string RESULT_KEY_CHECKSUM;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_CREATED")]
	public const string RESULT_KEY_CREATED;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_DESCRIPTION")]
	public const string RESULT_KEY_DESCRIPTION;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_DEVICE_ID")]
	public const string RESULT_KEY_DEVICE_ID;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_FILENAME")]
	public const string RESULT_KEY_FILENAME;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_FLAGS")]
	public const string RESULT_KEY_FLAGS;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_FLASHES_LEFT")]
	public const string RESULT_KEY_FLASHES_LEFT;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_GUID")]
	public const string RESULT_KEY_GUID;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_HOMEPAGE")]
	public const string RESULT_KEY_HOMEPAGE;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_ICON")]
	public const string RESULT_KEY_ICON;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_LICENSE")]
	public const string RESULT_KEY_LICENSE;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_METADATA")]
	public const string RESULT_KEY_METADATA;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_MODIFIED")]
	public const string RESULT_KEY_MODIFIED;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_NAME")]
	public const string RESULT_KEY_NAME;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_PLUGIN")]
	public const string RESULT_KEY_PLUGIN;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_RELEASE")]
	public const string RESULT_KEY_RELEASE;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_REMOTE_ID")]
	public const string RESULT_KEY_REMOTE_ID;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_SIZE")]
	public const string RESULT_KEY_SIZE;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_SUMMARY")]
	public const string RESULT_KEY_SUMMARY;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_TRUST_FLAGS")]
	public const string RESULT_KEY_TRUST_FLAGS;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_UPDATE_ERROR")]
	public const string RESULT_KEY_UPDATE_ERROR;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_UPDATE_STATE")]
	public const string RESULT_KEY_UPDATE_STATE;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_URI")]
	public const string RESULT_KEY_URI;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_VENDOR")]
	public const string RESULT_KEY_VENDOR;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_VENDOR_ID")]
	public const string RESULT_KEY_VENDOR_ID;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_VERSION")]
	public const string RESULT_KEY_VERSION;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_VERSION_BOOTLOADER")]
	public const string RESULT_KEY_VERSION_BOOTLOADER;
	[CCode (cheader_filename = "fwupd.h", cname = "FWUPD_RESULT_KEY_VERSION_LOWEST")]
	public const string RESULT_KEY_VERSION_LOWEST;
	[CCode (cheader_filename = "fwupd.h")]
	[Version (since = "1.0.4")]
	public static string build_history_report_json (GLib.GenericArray<Fwupd.Device> devices) throws GLib.Error;
	[CCode (cheader_filename = "fwupd.h")]
	[Version (since = "1.0.4")]
	public static string build_machine_id (string salt) throws GLib.Error;
	[CCode (cheader_filename = "fwupd.h")]
	[Version (since = "1.0.3")]
	public static string build_user_agent (string package_name, string package_version);
	[CCode (cheader_filename = "fwupd.h")]
	[Version (since = "0.9.3")]
	public static string checksum_format_for_display (string checksum);
	[CCode (cheader_filename = "fwupd.h")]
	[Version (since = "0.9.4")]
	public static unowned string checksum_get_best (GLib.GenericArray<string> checksums);
	[CCode (cheader_filename = "fwupd.h")]
	[Version (since = "0.9.4")]
	public static unowned string checksum_get_by_kind (GLib.GenericArray<string> checksums, GLib.ChecksumType kind);
	[CCode (cheader_filename = "fwupd.h")]
	[Version (since = "0.9.3")]
	public static GLib.ChecksumType checksum_guess_kind (string checksum);
	[CCode (cheader_filename = "fwupd.h")]
	[Version (since = "0.7.0")]
	public static Fwupd.TrustFlags trust_flag_from_string (string trust_flag);
	[CCode (cheader_filename = "fwupd.h")]
	[Version (since = "0.7.0")]
	public static unowned string trust_flag_to_string (Fwupd.TrustFlags trust_flag);
}
